{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/stanford-web-security","result":{"data":{"brainNote":{"slug":"stanford-web-security","title":"Stanford Web Security","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Stanford Web Security\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://web.stanford.edu/class/cs253/\"\n  }), \"Course Webpage\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lecture 1:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Same Origin Policy\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Server app security\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can't control the client. The client can go and send anything they want.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Client app security\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It's really easy to get a user to go to a url\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Auditing the code you're running isn't reaallly actually feasible. There's too much changing at a time.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Why is security high?\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Run untrusted code securely\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Want high performance on low-level features and hardware access\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"APIs have evolved\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can't make changes to break old websites.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sites can:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Download content from anywhere\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Spawn worker processes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Open sockets\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Many more things!\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Review\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"HTML\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Uniform Resource Locators (URLs)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"img\", _extends({\n    parentName: \"li\"\n  }, {\n    \"src\": \"https://firebasestorage.googleapis.com/v0/b/firescript-577a2.appspot.com/o/imgs%2Fapp%2Faeonneo%2FeiDo0fZQKv.png?alt=media&token=05812bfa-b065-462d-be44-db2857e3ba0b\",\n    \"alt\": null\n  }))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ways to specify:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Relative url (based off page we're currently on) \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<a href='september'>September News</a>\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Full url: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<a href='http://stanford.edu/news/2019/'>2019 News</a>\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Absolute URL: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<a href='/events'>Events</a>\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Fragment URL: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<a href='#section3'>Jump to section 3</a>\")))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"There are many HTML tags. Important ones are \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"link\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"style\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"script\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"JS started out as a scripting language for the browser, so it was lacking many features (modules, file storage, etc). People came along and made node so it could be used as a general purpose scripting language.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Many APIs aren't actually JS, they are provided by the browser. Node therefore doesn't have these (like moveWindow)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Readings\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://developers.google.com/web/updates/2018/09/inside-browser-part1\"\n  }), \"https://developers.google.com/web/updates/2018/09/inside-browser-part1\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"CPU: Does tasks in general\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"GPU: Good for graphics\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Process: Application's executing program. The OS gives this a slab of memory\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Thread: Lives inside the process; executes part of the process. Threads are optional.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Processes talk to each other using IPC (Inter Process Communication)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Chrome used to give each tab a process. Now it gives each site its own process (including iframes)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"{{\", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"/table\"\n  }), \"table\"), \"}}\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Browser\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Controls \\\"chrome\\\" -- address bar, bookmarks, back/forward, network requests, file access\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Renderer\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Controls anything inside the tab where a website is showing\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Plugin\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Controls plugins used by the website (such as flash)\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"GPU\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Handles GPU tasks in isolation (diff process because GPU handles requests from multiple apps, but draws on the same surface)\"))))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://developers.google.com/web/updates/2018/09/inside-browser-part2\"\n  }), \"https://developers.google.com/web/updates/2018/09/inside-browser-part2\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When a url is entered...\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"UI thread initiates network call to get site content. Network thread goes through appropriate protocols like DNS lookup and establishing TLS\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Read response: Payload comes in; network thread looks at first few types of the stream if necessary. The content-type header should say what type of data it is but it can be wrong. \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"MIME Type Sniffing\"), \" can be used here, but this is tricky\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Depending on the type of file, it gets passed to an appropriate process (renderer or download, for instance)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"SafeBrowsing check occurs -- if it's a known malicious site, then network thread alerts to display a warning. CORB (Cross Origin Read Blocking) makes sure sensitive cross-site data doesn't get to the renderer.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Finally, the page renders, address bar is updated, and all other browser-relevant things are updated.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"beforeunload runs when people leave.\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://developers.google.com/web/updates/2018/09/inside-browser-part3\"\n  }), \"https://developers.google.com/web/updates/2018/09/inside-browser-part3\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"What happens in the renderer process?\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Turn HTML, CSS, JS into a webpage. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Parse the DOM. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Load subresources (images, css, js needed)\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript\"\n  }), \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Assignment: \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://web.stanford.edu/class/cs253/assign0\"\n  }), \"https://web.stanford.edu/class/cs253/assign0\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lecture 2\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Same Origin Policy\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\"\n  }), \"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\"))))))));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"Security","slug":"security","childMdx":{"excerpt":"Security is v cool. Here's my notes to  Stanford Web Security .\nHere's my notes to  cryptography . General Web Security Mail SMTP Injection…"}}],"outboundReferenceNotes":[{"title":"table","slug":"table","childMdx":{"excerpt":""}}]},"site":{"siteMetadata":{"title":"aeonneo's notes"}}},"pageContext":{"slug":"stanford-web-security"}}}