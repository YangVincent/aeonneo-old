{"componentChunkName":"component---node-modules-gatsby-theme-andy-src-templates-note-js","path":"/lecture-2","result":{"data":{"brainNote":{"slug":"lecture-2","title":"Lecture 2","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Lecture 2\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"What happens when you type a URL and press enter?\"), mdx(\"h3\", null, mdx(\"a\", _extends({\n    parentName: \"h3\"\n  }, {\n    \"href\": \"/dns\"\n  }), \"DNS\"), \" (Domain Name Server)\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We ping the Root Nameserver returns a list of authoritative name servers for the TLD.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"TLD goes from \\\".edu\\\" to \\\"go to stanford\\\".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The final server is the \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Authoritative name server\"))), mdx(\"h4\", null, \"DNS Hijacking Vectors\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Malware changes user's local DNS settings \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/etc/hosts\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Hacked recursive DNS resolver\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Hacked router\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Hacked DNS nameserver\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Compromised user account at DNS provider\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This can get past https, since they can act like the actual server. Letsencrypt will give you a cert if you can prove that you own a domain.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ISP's used to point to their own pages with their ads if a page didn't exist. Comcast, TMobile both do this. \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://lookup.t-mobile.com/search/?q=http://questionablecontent.net\"\n  }), \"Example\"))), mdx(\"h4\", null, \"DNS Privacy\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Queries are in plaintext; ISPs have been known to sell this data.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Cloudflare \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"1.1.1.1\"), \" or another providers have better privacy policies. Unfortunately, ISPs can still see this, cause they can see that you're sending to cloudflare. The solution is DNS-over-HTTPS (default on Firefox; flag-blocked in Chrome via \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"chrome://flags/#dns-over-https\"), \"). You can also set this at the router level.\")), mdx(\"h3\", null, \"When you get IP address\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Send http request, receive response from the given server\")), mdx(\"h3\", null, \"Anatomy of an HTTP Request\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Method (GET/POST/PUT)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Path (/)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Protocol (HTTP/1.1)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Example: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"GET / HTTP/1.1\"))), mdx(\"h3\", null, \"Anatomy of an HTTP Response\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"HTTP/1.1 200 OK\\nContent-Length: 9001\\nContent-Type: text/html; charset=UTF-8\\nDate: Tue, 24 Sep 2019 20:30:00 GMT\\n\\n<!DOCTYPE html ...\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Protocol Version\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Status Code\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Status Message\")), mdx(\"h4\", null, \"Useful Headers\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Host: Domain name\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"User-Agent: Name of browser & OS\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Referer: webpage that led you to this one\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Cookie: Cookie the server gave you\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Range: Subset of bytes to fetch\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Cache-Control: Do you want a cached response?\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If-Modified-Since: Only load response if modified recently\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Connection: Control TCP socket (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"keep-alive\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"close\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Accept: What type of content we want (ex: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"text/html\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Accept-Encoding: Encoding algs we understand (ex: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"gzip\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Accept-Language: What language we want\")), mdx(\"h3\", null, \"HTTP Protocol\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Extensible: Just add HTTP headers to add new features\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Stateless: Two requests have no relation to each other\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Transport protocol agnostic: The only requirement is reliability (doesn't have to be TCP)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Proxy servers can be used to let multiple servers seem as a single server (Client -> Proxy -> One of many serverns)\")), mdx(\"h3\", null, \"Status Codes\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"1xx: Informational\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"2xx: Success\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"3xx: Redirection\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"4xx: User messed up\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"5xx: Server messed up\")), mdx(\"h3\", null, \"Layers of the internet\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"HTML/CSS/JS\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"HTTP\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"TLS\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"TCP\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"IP\")), mdx(\"h3\", null, \"Cookies\"), mdx(\"p\", null, \"Cookie: theme=dark; (Header name, cookie name, cookie value)\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"inboundReferenceNotes":[{"title":"Stanford Web Security","slug":"stanford-web-security","childMdx":{"excerpt":"Course Webpage Lecture 1 : How does the internet work? Assignment 1 :  https://web.stanford.edu/class/cs253/assign0 Lecture 2"}}],"outboundReferenceNotes":[{"title":"dns","slug":"dns","childMdx":{"excerpt":""}}]},"site":{"siteMetadata":{"title":"aeonneo's notes"}}},"pageContext":{"slug":"lecture-2"}}}